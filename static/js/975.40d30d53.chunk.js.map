{"version":3,"file":"static/js/975.40d30d53.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charForm/CharForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [])\n    \n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error)? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char;\n\n\n    let thumbnailClassNames = 'randomchar__img';\n    \n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        thumbnailClassNames += ' object-contain';\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n                    <img src={thumbnail} alt=\"Random character\" className={thumbnailClassNames}/>\n                    <div className=\"randomchar__info\">\n                        <p className=\"randomchar__name\">{name}</p>\n                        <p className=\"randomchar__descr\">\n                            {description}\n                        </p>\n                        <div className=\"randomchar__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport './charList.scss';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport PropTypes from 'prop-types';\n\n\nfunction useInput(initialValue) {\n    const [value, setValue] = useState(initialValue);\n\n    const onChange = e => {\n        setValue(e.target.value);\n    }\n\n    return {value, onChange}\n}\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        setNewItemLoading(false);\n        getAllCharacters()\n            .then(onCharListLoaded)\n            // eslint-disable-next-line\n    }, [])\n\n    const onCharListLoaded = (newCharList) => {\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    } \n\n    // Дозагрузка элементов\n    const onLoadMore = (offset) => {\n        setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n\n    let arr = charList.map(item => {\n        let classNames = 'char__img';\n\n        if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            classNames += ' object-contain';\n        }\n\n\n        return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li className=\"char__item\" key={item.id} onClick={() => props.onCharSelected(item.id)}>\n                        <img src={item.thumbnail} alt=\"\" className={classNames}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n        )\n    });\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading  && !newItemLoading ? <Spinner/> : null;\n        \n       \n        \n        return (\n                <div className=\"char__list\">\n                    <ul className=\"char__grid\">\n                        {errorMessage}\n                        {spinner}\n                        <TransitionGroup component={null}>   \n                            {arr}\n                        </TransitionGroup>\n                    </ul>\n                    <button className=\"button button__main button__long\" disabled={newItemLoading} onClick={() => onLoadMore(offset)} style={{display: charEnded ? 'none' : 'block'}}>\n                        <div className=\"inner\">load more</div>\n                    </button>\n                </div>\n        )\n    }\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport PropTypes from 'prop-types';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, []);\n\n\n    useEffect(() => {\n        console.log('update');\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const setContent = (process, char) => {\n        switch (process) {\n            case 'waiting':\n                return <Skeleton/>;\n            case 'loading':\n                return <Spinner/>\n            case 'confirmed':\n                return <View char={char}/>;\n            case 'error':\n                return <ErrorMessage/>;\n            default:\n                throw new Error('Unexpected process state');\n        }\n    }\n\n\n\n        return (\n            <div className=\"char__info\">\n                {setContent(process, char)}\n            </div>\n        )\n    }\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, wiki, homepage, comics} = char;\n\n    let classNames = '';\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        classNames += 'object-contain';\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} className={classNames}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'Comics is not found'}\n                    {\n                        comics.map((item, i) => {\n                            if (i > 9) {\n                                return;\n                            }\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                        {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <ErrorMessage/>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import './charForm.scss';\r\nimport { useState } from 'react';\r\nimport { Formik, Form, ErrorMessage, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CharForm = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, findCharacter, clearError} = useMarvelService();\r\n\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        findCharacter(name)\r\n            .then(res => setChar(res))\r\n    }\r\n\r\n    const content = !char ? null : char.length > 0 ? \r\n                    <div className=\"char__form-wrapper\">\r\n                        <p className=\"success\">{`There is! Visit ${char[0].name} page?`}</p>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">TO PAGE</div>\r\n                        </Link>\r\n                    </div> : <p className='error'>The character was not found. Check the name and try again</p>\r\n\r\n\r\n    return (\r\n        <Formik initialValues={{\r\n            name: ''\r\n        }} validationSchema={Yup.object({\r\n            name: Yup.string().required('This field is required')\r\n        })} onSubmit = {({name}) => {\r\n            updateChar(name);\r\n        }}>\r\n            <Form className=\"char__form\">\r\n                <p className=\"char__form-title\">Or find a character by name:</p>\r\n                <Field name='name' placeholder='Enter name' type=\"name\" className=\"char__form-input\" />\r\n                <button type='submit' className=\"button button__main\" >\r\n                    <div className=\"inner\">FIND</div>\r\n                </button>\r\n                {content}\r\n                <ErrorMessage className='error' name='name' component='p'/>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst ViewPage = (props) => {\r\n    return (\r\n        <div className=\"char__form-wrapper\">\r\n            <p className=\"success\">{`There is! Visit ${props.char[0].name} page?`}</p>\r\n            <button className=\"button button__secondary\">\r\n                <div className=\"inner\">TO PAGE</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharForm;","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharForm from \"../charForm/CharForm\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n            <meta\r\n            name=\"description\"\r\n            content=\"Marvel information portal\"\r\n            />\r\n            <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook.js';\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apibase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = 'apikey=3667c33483e21c61a3a360a877b318b2';\r\n    const _offset = 210;\r\n    const _offsetComics = 0;\r\n\r\n    const getAllCharacters = async (offset = _offset) => {\r\n        const res = await request(`${_apibase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res =  await request(`${_apibase}characters/${id}?${_apikey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // const getComics = async () => {\r\n    //     const res = await request(`${_apibase}comics?limit=8&${_apikey}`);\r\n    //     return res.data.results;\r\n    // }\r\n\r\n    const getComics = async (offset = _offsetComics) => {\r\n        const res = await request(`${_apibase}comics?limit=8&offset=${offset}&${_apikey}`);\r\n        return res.data.results;\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apibase}comics/${id}?${_apikey}`)\r\n        return res.data.results;\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        if (char.description === '') {\r\n            char.description = 'description is not found';\r\n        }\r\n        if (char.description.length >= 200) {\r\n            char.description = `${char.description.slice(0, 200)}...`;\r\n        }\r\n\r\n        return {\r\n            name: char.name,\r\n            id: char.id,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const findCharacter = async (name) => {\r\n        const res = await request(`${_apibase}characters?name=${name}&${_apikey}`);\r\n        return res.data.results;\r\n    }\r\n\r\n    return {loading, \r\n            error, \r\n            process, \r\n            getAllCharacters, \r\n            getCharacter, \r\n            clearError, \r\n            getComics, \r\n            getComic, \r\n            findCharacter,\r\n            setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status : ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess};\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","thumbnailClassNames","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onCharListLoaded","newCharList","ended","length","arr","map","item","classNames","CSSTransition","timeout","onCharSelected","TransitionGroup","component","disabled","onLoadMore","comics","i","process","setProcess","console","log","charId","Error","setContent","ErrorBoundary","state","errorInfo","this","setState","children","Component","findCharacter","to","initialValues","validationSchema","Yup","required","onSubmit","res","placeholder","type","selectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","message","useHttp","_apibase","_apikey","results","_transformCharacter","getComics","getComic","slice","path","extension","urls","items"],"sourceRoot":""}