{"version":3,"file":"static/js/907.20557232.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './comicsList.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport { Link } from 'react-router-dom';\n\nconst ComicsList = () => {\n    const [comics, setComics] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const {loading, error, getComics} = useMarvelService();\n\n    useEffect(() => {\n        setNewItemLoading(false);\n        getComics()\n            .then(res => setComics(res));\n    }, []);\n\n    const onLoadMoreComics = () => {\n        setNewItemLoading(true);\n        getComics(offset)\n            .then(res => setComics(comics => [...comics, ...res]));\n        setOffset(offset => offset + 8);\n        setNewItemLoading(false);\n    }\n\n    const content = comics.map((item, i) => {\n        return (\n            <li key={i} className=\"comics__item\">\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={`${item.thumbnail.path}.${item.thumbnail.extension}`} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.prices[0].price + ' $'}</div>\n                    </Link>\n            </li>\n        )\n    })\n\n    console.log('batch');\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    return (\n        <div className=\"comics__list\">\n            <ul className=\"comics__grid\">\n                {errorMessage}\n                {content}\n                {spinner}\n            </ul>\n            <button className=\"button button__main button__long\" disabled={newItemLoading} onClick={onLoadMoreComics}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name='description'\r\n                content='Page with list of our comics'/>\r\n                <title>Comics Page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {useHttp} from '../hooks/http.hook.js';\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apibase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = 'apikey=3667c33483e21c61a3a360a877b318b2';\r\n    const _offset = 210;\r\n    const _offsetComics = 0;\r\n\r\n    const getAllCharacters = async (offset = _offset) => {\r\n        const res = await request(`${_apibase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res =  await request(`${_apibase}characters/${id}?${_apikey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // const getComics = async () => {\r\n    //     const res = await request(`${_apibase}comics?limit=8&${_apikey}`);\r\n    //     return res.data.results;\r\n    // }\r\n\r\n    const getComics = async (offset = _offsetComics) => {\r\n        const res = await request(`${_apibase}comics?limit=8&offset=${offset}&${_apikey}`);\r\n        return res.data.results;\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apibase}comics/${id}?${_apikey}`)\r\n        return res.data.results;\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        if (char.description === '') {\r\n            char.description = 'description is not found';\r\n        }\r\n        if (char.description.length >= 200) {\r\n            char.description = `${char.description.slice(0, 200)}...`;\r\n        }\r\n\r\n        return {\r\n            name: char.name,\r\n            id: char.id,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const findCharacter = async (name) => {\r\n        const res = await request(`${_apibase}characters?name=${name}&${_apikey}`);\r\n        return res.data.results;\r\n    }\r\n\r\n    return {loading, \r\n            error, \r\n            process, \r\n            getAllCharacters, \r\n            getCharacter, \r\n            clearError, \r\n            getComics, \r\n            getComic, \r\n            findCharacter,\r\n            setProcess}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status : ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {loading, request, error, clearError, process, setProcess};\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","useState","comics","setComics","newItemLoading","setNewItemLoading","offset","setOffset","useMarvelService","loading","error","getComics","useEffect","then","res","content","map","item","i","className","to","id","thumbnail","path","extension","title","prices","price","console","log","spinner","Spinner","errorMessage","ErrorMessage","disabled","onClick","avengers","avengersLogo","Helmet","name","setLoading","setError","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apibase","_apikey","getAllCharacters","results","_transformCharacter","getCharacter","getComic","char","description","length","slice","homepage","urls","wiki","items","findCharacter"],"sourceRoot":""}